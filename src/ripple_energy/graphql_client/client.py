# Generated by ariadne-codegen on 2023-09-13 00:38
# Source: src/ripple_energy/graphql

from typing import Optional

from .async_base_client import AsyncBaseClient
from .get_member import GetMember, GetMemberMember
from .input_types import TokenAuthenticationInput
from .token_auth import TokenAuth, TokenAuthTokenAuth
from .version import Version


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def token_auth(self, input: TokenAuthenticationInput) -> TokenAuthTokenAuth:
        query = gql(
            """
            mutation TokenAuth($input: TokenAuthenticationInput!) {
              tokenAuth(input: $input) {
                token
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TokenAuth.parse_obj(data).token_auth

    async def version(self) -> Optional[str]:
        query = gql(
            """
            query Version {
              version
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return Version.parse_obj(data).version

    async def get_member(self) -> Optional[GetMemberMember]:
        query = gql(
            """
            query GetMember {
              member {
                ...MemberFragment
              }
            }

            fragment CoopFragment on Coop {
              id
              name
              code
              wattageSku
              status
              active
              description
              maxGenerationPerMember
              minGenerationPerMember
              percentageFunded
              publicCloseDate
              estimatedBillSavingsPerWattHour
              firstYearEstimatedBillSavingsPerWattHour
              costTotalPerWattHour
              isAvailableForLocalPurchase
              localPurchasePostcodes
              currency {
                id
                code
                precision
                symbol
              }
              generationfarm {
                id
                name
                latitude
                longitude
                isLocationConfirmed
                startDate
                operationalStatus
                generationType
                capacity
                capacityToGenerationFactor
                lightShowImage
                currency {
                  id
                  code
                  precision
                  symbol
                }
              }
              documents {
                documentUrl
                version
                document {
                  id
                  name
                  category
                  subcategory
                  description
                  updatedAt
                  documentTags {
                    id
                    name
                  }
                }
              }
            }

            fragment MemberFragment on Member {
              id
              isBusiness
              accountType
              businessName
              businessRegistrationNumber
              registrationCompleted
              fullyChargedPreregistered
              investmentTotal
              billSavingsAcrossAllProjects
              expectedGenerationAnnualTotal
              ownershipPercentageTotal
              capacityOwnedTotal
              hasReservedInActiveCoop
              dateOfReservationInActiveCoop
              dateOfLastSharePurchase
              hasBoughtSharesInActiveCoop
              hasBoughtSharesInGraigFatha
              hasBoughtSharesInKirkHill
              hasBoughtSharesInMultipleCoops
              isSuppliedByOctopusEnergy
              memberDocument {
                id
                file
                documentUrl
              }
              address {
                id
                line1
                line2
                town
                postcode
                manuallyEntered
              }
              badges {
                id
                name
                code
                description
                imageUrl
              }
              beneficiaries {
                id
                nominatedPerson
                email
                phone
                line1
                line2
                town
                postcode
              }
              invoices {
                id
                category
                quote {
                  id
                  arrangementFee
                  billSavingsAnnualEstimate
                  capacity
                  costTotal
                  costTotalLocale
                  currency {
                    code
                    precision
                    symbol
                  }
                  ownershipMultiplier
                  paymentTotal
                  paymentTotalLocale
                  electricityConsumptionAnnual
                }
              }
              memberships {
                id
                capacity
                reservedCapacity
                createdAt
                expectedGenerationAnnualTotal
                ownershipPercentage
                investmentTotal
                billSavingsForProjectLifespan
                billSavingsFirstYearEstimateTotal
                firstOwnershipPurchaseDate
                coop {
                  ...CoopFragment
                }
                lightShowImage
              }
              currentMemberSupplier {
                id
                accountIdentifier
                supplier {
                  id
                  name
                  logoUrl
                }
              }
              waitingListPlaces {
                ...WaitingListPlaceFragment
              }
            }

            fragment WaitingListFragment on CoopWaitingList {
              id
              coop {
                id
                name
              }
            }

            fragment WaitingListPlaceFragment on MemberCoopWaitingListPlace {
              id
              generationRequestedKwh
              waitingList {
                ...WaitingListFragment
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetMember.parse_obj(data).member
